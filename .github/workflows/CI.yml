# This file is autogenerated by maturin v1.4.0
# To update, run
#
#    maturin generate-ci github
#
name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
      - dev
  workflow_dispatch:
  release:
    types: [created]

permissions:
  contents: read

jobs:
  linux:
    name: Build ${{ matrix.build_target }}-python${{matrix.python-version}}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build_target: [macos, linux, linux-armhf, linux-armv6]
        python-version: ["3.9"]
        include:
          - build_target: macos
            os: macos-latest
            artifact_prefix: macos
            target: x86_64-apple-darwin
          - build_target: linux
            os: ubuntu-latest
            artifact_prefix: linux
            target: x86_64-unknown-linux-gnu
          - build_target: linux-armhf
            os: ubuntu-latest
            artifact_prefix: linux-armhf
            target: arm-unknown-linux-gnueabihf
          - build_target: linux-armv6
            os: ubuntu-latest
            artifact_prefix: linux-armv6
            target: arm-unknown-linux-gnueabihf
          - build_target: macos
            artifact_type: slim
            audio_backend: portaudio_backend
          - build_target: linux
            artifact_type: slim
            audio_backend: pulseaudio_backend
          - build_target: linux-armhf
            artifact_type: slim
            audio_backend: alsa_backend
          - build_target: linux-armv6
            artifact_type: slim
            audio_backend: alsa_backend
          - build_target: macos
            artifact_type: default
            audio_backend: portaudio_backend
          - build_target: linux
            artifact_type: default
            audio_backend: pulseaudio_backend
          - build_target: linux-armhf
            artifact_type: default
            audio_backend: alsa_backend
          - build_target: linux
            artifact_type: full
            audio_backend: pulseaudio_backend,alsa_backend,rodio_backend
          - build_target: macos
            artifact_type: full
            audio_backend: portaudio_backend,rodio_backend
          - build_target: linux-armhf
            artifact_type: full
            audio_backend: alsa_backend

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
            python-version: ${{ matrix.python-version }}
      - name: install rust stable
        id: rust-toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}

      - name: Installing needed macOS dependencies
        if: matrix.os == 'macos-latest'
        run: brew install awk dbus pkg-config portaudio
      - name: Installing needed Ubuntu dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y -qq libasound2-dev libssl-dev libpulse-dev libdbus-1-dev
      - name: Installing needed Ubuntu armv6 dependencies
        if: matrix.os == 'ubuntu-latest' && matrix.build_target == 'linux-armv6'
        run: |
          sudo mkdir -p /build/sysroot
          echo "deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports/ bionic main" | sudo tee -a /etc/apt/sources.list
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3B4FE6ACC0B21F32
          sudo apt-get update
          sudo apt-get install -y -qq git
          sudo git -C /build clone --depth=1 https://github.com/raspberrypi/tools.git
          sudo apt-get download libasound2:armhf libasound2-dev:armhf libssl-dev:armhf libssl1.1:armhf
          sudo dpkg -x libasound2_*.deb /build/sysroot/
          sudo dpkg -x libssl-dev*.deb /build/sysroot/
          sudo dpkg -x libssl1.1*.deb /build/sysroot/
          sudo dpkg -x libasound2-dev*.deb /build/sysroot/
          echo "/build/tools/arm-bcm2708/arm-linux-gnueabihf/bin" >> $GITHUB_PATH
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "TEST=abcd" >> $GITHUB_ENV
          echo "RUSTFLAGS=-C linker=/build/tools/arm-bcm2708/arm-linux-gnueabihf/bin/arm-linux-gnueabihf-gcc -L/build/tools/arm-bcm2708/arm-linux-gnueabihf/arm-linux-gnueabihf/sysroot/lib -L/build/tools/arm-bcm2708/arm-linux-gnueabihf/arm-linux-gnueabihf/sysroot/usr/lib -L/build/sysroot/usr/lib/arm-linux-gnueabihf -L/build/sysroot/lib/arm-linux-gnueabihf" >> $GITHUB_ENV
          echo "C_INCLUDE_PATH=/build/sysroot/usr/include" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=/build/sysroot/usr/lib/arm-linux-gnueabihf" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=/build/sysroot/usr/include/arm-linux-gnueabihf" >> $GITHUB_ENV
      - name: Installing needed Ubuntu armhf dependencies (full)
        if: matrix.os == 'ubuntu-latest' && matrix.build_target == 'linux-armhf'
        run: |
          sudo apt update
          sudo apt-get install alsa-utils libasound2-plugins mpg321 lame
          sudo apt-get install -y libasound2-dev portaudio19-dev build-essential libpulse-dev libdbus-1-dev libudev-dev
          # Make dbus-rs cross-compile, see https://github.com/diwic/dbus-rs/issues/184#issuecomment-520228758
#          sudo apt-get download libdbus-1-dev:armhf libdbus-1-3:armhf libsystemd0:armhf libgcrypt20:armhf liblzma5:armhf liblz4-1:armhf libgpg-error0:armhf
#          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3B4FE6ACC0B21F32
#          sudo dpkg -x libdbus-1-3*.deb /build/sysroot/
#          sudo dpkg -x libdbus-1-dev*.deb /build/sysroot/
#          sudo dpkg -x libsystemd0*.deb /build/sysroot/
#          sudo dpkg -x libgcrypt20_*.deb /build/sysroot/
#          sudo dpkg -x liblzma5_*.deb /build/sysroot/
#          sudo dpkg -x liblz4-1_*.deb /build/sysroot/
#          sudo dpkg -x libgpg-error0_*.deb /build/sysroot/
#          sudo cp -r /build/sysroot/lib/* /build/sysroot/usr/lib/
#          sudo ln -frs /build/sysroot/lib/arm-linux-gnueabihf/libdbus-1.so.3 /build/sysroot/lib/arm-linux-gnueabihf/libdbus-1.so
#          sudo ln -rs /build/sysroot/lib/arm-linux-gnueabihf/libgcrypt.so.20 /build/sysroot/lib/arm-linux-gnueabihf/libgcrypt.so
#          sudo ln -rs /build/sysroot/lib/arm-linux-gnueabihf/libgpg-error.so.0 /build/sysroot/lib/arm-linux-gnueabihf/libgpg-error.so
#          sudo ln -rs /build/sysroot/lib/arm-linux-gnueabihf/liblzma.so.5 /build/sysroot/lib/arm-linux-gnueabihf/liblzma.so
#          sudo ln -rs /build/sysroot/lib/arm-linux-gnueabihf/libsystemd.so.0 /build/sysroot/lib/arm-linux-gnueabihf/libsystemd.so
#          sudo ln -rs /build/sysroot/usr/lib/arm-linux-gnueabihf/liblz4.so.1 /build/sysroot/usr/lib/arm-linux-gnueabihf/liblz4.so
#          sudo mkdir -p /.cargo
#          echo -e '[target.arm-unknown-linux-gnueabihf.dbus]\nrustc-link-lib = ["dbus-1", "gcrypt", "gpg-error", "lz4", "lzma", "systemd"]' | sudo tee -a /.cargo/config

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          command: build
          args: --release --target ${{ matrix.target }} --out dist --find-interpreter
          sccache: 'true'
#          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [linux, sdist]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing *